from railnl import RailNL
import random
import math  # Import the math module for exp function
from station import Station
import copy
from help_funtions import *
from greedy import greedy_algorithm

max_aantal_trajecten = 20
max_aantal_minuten = 180

def simulated_annealing(temperature, cooling_rate, iterations):
    rail_at_max_score = initialize_rail()
    current_rail = initialize_rail()
    best_score = 0

    for iteration in range(iterations):
        # Print progress of iterations
        if iteration/iterations * 100 % 5 == 0:
            print(f"{iteration/iterations * 100}%")
  
        current_temperature = temperature * math.exp(-cooling_rate * iteration)
        
        # Generate a new solution
        new_rail = generate_new_solution(current_rail)

        # Calculate scores
        current_score = current_rail.get_score()
        new_score = new_rail.get_score()

        # Decide whether to accept the new solution
        if accept_solution(current_score, new_score, current_temperature):
            current_rail = copy.deepcopy(new_rail)

            # Update the best solution if needed
            if new_score > best_score:
                best_score = new_score
                rail_at_max_score.trajecten = copy.deepcopy(current_rail.trajecten)

    return rail_at_max_score

def generate_new_solution(current_rail):
    if len(current_rail.trajecten) <= 1:
        new_rail = greedy_algorithm(100)
        print("Greedy succesfully loaded, greedy has a score of: ", new_rail.get_score())
    else:
        new_rail = copy.deepcopy(current_rail)

    operation = random.choice(['add_traject', 'delete_traject', 'add_station', 'delete_station'])

    traject_index = random.randint(1, len(new_rail.trajecten))

    #if selected traject is empty, add a random station

    if new_rail.trajecten[traject_index].traject_stations == []:
        begin_station = random.choice(new_rail.stations)
        new_rail.trajecten[traject_index].add_station_to_traject(begin_station)
    
    if operation == 'add_station':
        # Implement logic to add a station to an existing traject
  
        new_station = new_rail.trajecten[traject_index].random_connected_station()
        last_station = new_rail.trajecten[traject_index].last_station()
        # duration = last_station.get_duration(new_station)
        duration = last_station.get_duration(new_station)

        # Check if the new station can be added to the traject
        if new_station and new_rail.sum_time(traject_index) + duration <= max_aantal_minuten:
            new_rail.trajecten[traject_index].add_station_to_traject(new_station)
        else:
            operation = 'delete_station'

    elif operation == 'delete_station':
        # Implement logic to delete a station from an existing traject
        traject_index = random.randint(1, len(new_rail.trajecten))
        new_rail.trajecten[traject_index].delete_latest_station()

    # Randomly select a traject to modify
    if len(new_rail.trajecten) == 1:
        traject_index = 1
    elif len(new_rail.trajecten) == 0:
        new_rail.create_traject(1)
        traject_index = 1
    elif len(new_rail.trajecten) > 1:
        traject_index = random.randint(1, len(new_rail.trajecten))


   # Delete the last two stations if the traject is longer than 3 stations, then pick a random station and a greedy station
    traject = new_rail.trajecten[traject_index]
    if len(traject.traject_stations) > 3:

        traject.delete_latest_station()

        traject.delete_latest_station()
        random_station = traject.random_connected_station()
        if random_station:
            traject.add_station_to_traject(random_station)
        greedy_station_2 = greedy_decision(new_rail, traject_index)
        if greedy_station_2:
            traject.add_station_to_traject(greedy_station_2)
    
    elif len(traject.traject_stations) <= 3:
        traject.traject_stations = []
        # traject.delete_latest_station()
        # random_station = traject.random_connected_station()
        # traject.add_station_to_traject(random_station)
        
    
    return new_rail

def accept_solution(current_score, new_score, temperature):
    if new_score > current_score:
        return True
    else:
        probability = math.exp((new_score - current_score) / temperature)
        return random.uniform(0, 1) < probability

# Set parameters for simulated annealing
initial_temperature = 1000
cooling_rate = 0.005
iterations = 10000

rail_at_max_score = simulated_annealing(initial_temperature, cooling_rate, iterations)
rail_at_max_score.print_output()
# print()
# rail_at_max_score.upload_output('output_simulated_annealing.csv')

