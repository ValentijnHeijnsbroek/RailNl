   # def load_stations(self, station_filename):
    #     with open(station_filename, 'r') as file:
    #         reader = csv.reader(file)
    #         header = next(reader)  # Skip the header row if it exists
    #         for row in reader:
    #             name = row[0]
    #             y = float(row[1])
    #             x = float(row[2])
    #             station = Station(name, x, y)
    #             self.stations.append(station)

    # def load_connections(self, connection_filename):
    #     with open(connection_filename, 'r') as file:
    #         reader = csv.reader(file)
    #         header = next(reader)
            
    #         for row in reader:
    #             self.total_connections += 1
    #             station_data = row[0]
    #             connection_data = row[1]
    #             duration_data = float(row[2])
                

    #             connected_stations = []
    #             connected_stations.append((row[0], row[1]))

    #             for station in self.stations:
    #                 if station.name == station_data:
    #                     starting_connection = station
    #                 if station.name == connection_data:
    #                     ending_connection = station
                
    #             starting_connection.connections[ending_connection] = duration_data
    #             ending_connection.connections[starting_connection] = duration_data

    # Creates a new traject
    # def create_traject(self):
    #     traject = Traject()
    #     self.trajecten.append(traject)

    # # Adds station object to existing traject
    # def add_station_to_traject(self, station, traject_index):
    #     if len(self.trajecten[traject_index].stations) == 0:
    #         self.trajecten[traject_index].add_station(station)
    #         print("first station added to traject")

    #     # Checks if traject index is in range, and if the station has a connection with the station in the traject
    #     elif traject_index < len(self.trajecten) and self.trajecten[traject_index].stations[-1].has_connection(station):
    #         print("Has connection and in index")
    #         traject = self.trajecten[traject_index]
    #         traject.add_station(station)

    #     else:
    #         print("Error")

    # for i in range(0, 6):
    #     start_station = current_station
        
    #     traject.add_station_to_traject(start_station, self.stations_connections)

    #     # get the recently added station and search for the connections
    #     current_station = traject.traject_stations[-1]
